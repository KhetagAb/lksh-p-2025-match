/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { corePlayerByTgGet } from '../fn/players/core-player-by-tg-get';
import { CorePlayerByTgGet$Params } from '../fn/players/core-player-by-tg-get';
import { Player } from '../models/player';
import { registerPlayer } from '../fn/players/register-player';
import { RegisterPlayer$Params } from '../fn/players/register-player';

@Injectable({ providedIn: 'root' })
export class PlayersService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `registerPlayer()` */
  static readonly RegisterPlayerPath = '/core/player/register';

  /**
   * Регистрирует пользователя.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `registerPlayer()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  registerPlayer$Response(params: RegisterPlayer$Params, context?: HttpContext): Observable<StrictHttpResponse<{

/**
 * Core-идентификатор
 */
'id': number;
}>> {
    return registerPlayer(this.http, this.rootUrl, params, context);
  }

  /**
   * Регистрирует пользователя.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `registerPlayer$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  registerPlayer(params: RegisterPlayer$Params, context?: HttpContext): Observable<{

/**
 * Core-идентификатор
 */
'id': number;
}> {
    return this.registerPlayer$Response(params, context).pipe(
      map((r: StrictHttpResponse<{

/**
 * Core-идентификатор
 */
'id': number;
}>): {

/**
 * Core-идентификатор
 */
'id': number;
} => r.body)
    );
  }

  /** Path part for operation `corePlayerByTgGet()` */
  static readonly CorePlayerByTgGetPath = '/core/player/by_tg';

  /**
   * Получение пользователя по телеграму.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `corePlayerByTgGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  corePlayerByTgGet$Response(params?: CorePlayerByTgGet$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'player': Player;
}>> {
    return corePlayerByTgGet(this.http, this.rootUrl, params, context);
  }

  /**
   * Получение пользователя по телеграму.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `corePlayerByTgGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  corePlayerByTgGet(params?: CorePlayerByTgGet$Params, context?: HttpContext): Observable<{
'player': Player;
}> {
    return this.corePlayerByTgGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'player': Player;
}>): {
'player': Player;
} => r.body)
    );
  }

}
