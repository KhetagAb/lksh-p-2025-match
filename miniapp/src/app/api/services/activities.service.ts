/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { Activity } from '../models/activity';
import { coreActivitiesBySportSectionIdGet } from '../fn/activities/core-activities-by-sport-section-id-get';
import { CoreActivitiesBySportSectionIdGet$Params } from '../fn/activities/core-activities-by-sport-section-id-get';
import { coreActivityCreatePost } from '../fn/activities/core-activity-create-post';
import { CoreActivityCreatePost$Params } from '../fn/activities/core-activity-create-post';
import { coreActivityDeleteByIdPost } from '../fn/activities/core-activity-delete-by-id-post';
import { CoreActivityDeleteByIdPost$Params } from '../fn/activities/core-activity-delete-by-id-post';
import { coreActivityIdEnrollPost } from '../fn/activities/core-activity-id-enroll-post';
import { CoreActivityIdEnrollPost$Params } from '../fn/activities/core-activity-id-enroll-post';
import { coreActivityUpdateByIdPost } from '../fn/activities/core-activity-update-by-id-post';
import { CoreActivityUpdateByIdPost$Params } from '../fn/activities/core-activity-update-by-id-post';
import { coreTeamsByActivityIdGet } from '../fn/activities/core-teams-by-activity-id-get';
import { CoreTeamsByActivityIdGet$Params } from '../fn/activities/core-teams-by-activity-id-get';
import { Team } from '../models/team';
import { TeamList } from '../models/team-list';

@Injectable({ providedIn: 'root' })
export class ActivitiesService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `coreTeamsByActivityIdGet()` */
  static readonly CoreTeamsByActivityIdGetPath = '/core/teams/by_activity/{id}';

  /**
   * Получение активности по идентификатору.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `coreTeamsByActivityIdGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  coreTeamsByActivityIdGet$Response(params: CoreTeamsByActivityIdGet$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'teams': TeamList;
}>> {
    return coreTeamsByActivityIdGet(this.http, this.rootUrl, params, context);
  }

  /**
   * Получение активности по идентификатору.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `coreTeamsByActivityIdGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  coreTeamsByActivityIdGet(params: CoreTeamsByActivityIdGet$Params, context?: HttpContext): Observable<{
'teams': TeamList;
}> {
    return this.coreTeamsByActivityIdGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'teams': TeamList;
}>): {
'teams': TeamList;
} => r.body)
    );
  }

  /** Path part for operation `coreActivityCreatePost()` */
  static readonly CoreActivityCreatePostPath = '/core/activity/create';

  /**
   * Создает активность.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `coreActivityCreatePost()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  coreActivityCreatePost$Response(params: CoreActivityCreatePost$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'activity': Activity;
}>> {
    return coreActivityCreatePost(this.http, this.rootUrl, params, context);
  }

  /**
   * Создает активность.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `coreActivityCreatePost$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  coreActivityCreatePost(params: CoreActivityCreatePost$Params, context?: HttpContext): Observable<{
'activity': Activity;
}> {
    return this.coreActivityCreatePost$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'activity': Activity;
}>): {
'activity': Activity;
} => r.body)
    );
  }

  /** Path part for operation `coreActivityDeleteByIdPost()` */
  static readonly CoreActivityDeleteByIdPostPath = '/core/activity/delete_by/{id}';

  /**
   * Удаляет активность.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `coreActivityDeleteByIdPost()` instead.
   *
   * This method doesn't expect any request body.
   */
  coreActivityDeleteByIdPost$Response(params: CoreActivityDeleteByIdPost$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'activity': Activity;
}>> {
    return coreActivityDeleteByIdPost(this.http, this.rootUrl, params, context);
  }

  /**
   * Удаляет активность.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `coreActivityDeleteByIdPost$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  coreActivityDeleteByIdPost(params: CoreActivityDeleteByIdPost$Params, context?: HttpContext): Observable<{
'activity': Activity;
}> {
    return this.coreActivityDeleteByIdPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'activity': Activity;
}>): {
'activity': Activity;
} => r.body)
    );
  }

  /** Path part for operation `coreActivityUpdateByIdPost()` */
  static readonly CoreActivityUpdateByIdPostPath = '/core/activity/update_by/{id}';

  /**
   * Изменяет активность.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `coreActivityUpdateByIdPost()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  coreActivityUpdateByIdPost$Response(params: CoreActivityUpdateByIdPost$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'activity': Activity;
}>> {
    return coreActivityUpdateByIdPost(this.http, this.rootUrl, params, context);
  }

  /**
   * Изменяет активность.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `coreActivityUpdateByIdPost$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  coreActivityUpdateByIdPost(params: CoreActivityUpdateByIdPost$Params, context?: HttpContext): Observable<{
'activity': Activity;
}> {
    return this.coreActivityUpdateByIdPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'activity': Activity;
}>): {
'activity': Activity;
} => r.body)
    );
  }

  /** Path part for operation `coreActivitiesBySportSectionIdGet()` */
  static readonly CoreActivitiesBySportSectionIdGetPath = '/core/activities/by_sport_section/{id}';

  /**
   * Возвращает список всех активностей по спорту.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `coreActivitiesBySportSectionIdGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  coreActivitiesBySportSectionIdGet$Response(params: CoreActivitiesBySportSectionIdGet$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'activities': Array<Activity>;
}>> {
    return coreActivitiesBySportSectionIdGet(this.http, this.rootUrl, params, context);
  }

  /**
   * Возвращает список всех активностей по спорту.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `coreActivitiesBySportSectionIdGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  coreActivitiesBySportSectionIdGet(params: CoreActivitiesBySportSectionIdGet$Params, context?: HttpContext): Observable<{
'activities': Array<Activity>;
}> {
    return this.coreActivitiesBySportSectionIdGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'activities': Array<Activity>;
}>): {
'activities': Array<Activity>;
} => r.body)
    );
  }

  /** Path part for operation `coreActivityIdEnrollPost()` */
  static readonly CoreActivityIdEnrollPostPath = '/core/activity/{id}/enroll';

  /**
   * Создает команду из одного человека на активность.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `coreActivityIdEnrollPost()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  coreActivityIdEnrollPost$Response(params: CoreActivityIdEnrollPost$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'team': Team;
}>> {
    return coreActivityIdEnrollPost(this.http, this.rootUrl, params, context);
  }

  /**
   * Создает команду из одного человека на активность.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `coreActivityIdEnrollPost$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  coreActivityIdEnrollPost(params: CoreActivityIdEnrollPost$Params, context?: HttpContext): Observable<{
'team': Team;
}> {
    return this.coreActivityIdEnrollPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'team': Team;
}>): {
'team': Team;
} => r.body)
    );
  }

}
