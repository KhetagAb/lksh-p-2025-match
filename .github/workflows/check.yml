name: Check

on:
  pull_request:
  push:
    branches:
      - master

jobs:
  core_check:
    name: Build & test core
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: stable

      - name: Setup Docker
        uses: docker/setup-buildx-action@v3

      - name: Setup Compose
        uses: docker/setup-compose-action@v1

      - name: Build
        run: docker buildx build . --file core/dev.dockerfile

      - name: Run codegen
        run: |
          go generate ./cmd
          go tool github.com/oapi-codegen/oapi-codegen/v2/cmd/oapi-codegen --config config/openapi.yaml ../docs/api/openapi.yaml
        working-directory: core/

      - name: Lint & typecheck
        uses: golangci/golangci-lint-action@v8.0.0
        with:
          working-directory: core

      - name: Run tests
        run: cat .env.example > .env.test && docker compose -f core/docker-compose.test.yml up --build --force-recreate --remove-orphans --abort-on-container-exit
        env:
          POSTGRES_HOST: ${{ vars.POSTGRES_HOST }}
          POSTGRES_PORT: ${{ vars.POSTGRES_PORT }}
          POSTGRES_USER: ${{ vars.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ vars.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ vars.POSTGRES_DB }}

  bff_check:
    name: Build & test BFF
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup UV
        uses: astral-sh/setup-uv@v2

      - name: Setup Docker
        uses: docker/setup-buildx-action@v3

      - name: Setup Compose
        uses: docker/setup-compose-action@v1

      - name: Install dependencies
        run: uv venv --python 3.13.5
        working-directory: bff/

      - name: Build
        run: docker buildx build . --file bff/dev.dockerfile

      - name: Run codegen
        run: |
          uv run openapi-python-client generate --path ../docs/api/openapi.yaml --overwrite --output-path ./tmp
          rm -rf core_client
          mv tmp/core_client lkshmatch/
          rm -rf ./tmp
        working-directory: bff/

      - name: Lint
        run: uv run ruff check lkshmatch
        working-directory: bff/

      - name: Typecheck
        run: uv run mypy -p lkshmatch --cache-dir=/dev/null --config-file=pyproject.toml
        working-directory: bff/

      - name: Run tests
        run: |
          docker network create match-shared-network
          cat .env.example > .env && docker compose -f bff/docker-compose.test.yml up --build --force-recreate --remove-orphans --abort-on-container-exit
        env:
          MONGO_INITDB_ROOT_USERNAME: ${ vars.MONGODB_ROOT_USERNAME }
          MONGO_INITDB_ROOT_PASSWORD: ${ vars.MONGODB_ROOT_PASSWORD }
          MONGO_INITDB_DATABASE: ${ vars.MONGODB_DATABASE }
