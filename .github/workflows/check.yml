name: Check

on:
  pull_request:
  push:
    branches:
      - master

jobs:
  core_lint:
    name: Lint core
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v5
      - name: setup go
        uses: actions/setup-go@v5
        with:
          go-version: stable
      - name: codegen
        run: |
          go generate ./cmd
          go tool github.com/oapi-codegen/oapi-codegen/v2/cmd/oapi-codegen --config config/openapi.yaml ../docs/api/openapi.yaml
        working-directory: core/
      - name: lint
        uses: golangci/golangci-lint-action@v8.0.0
        with:
          working-directory: core

  core_build:
    name: Build core
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v5
      - name: setup docker
        uses: docker/setup-buildx-action@v3
      - name: build
        run: docker buildx build . --file core/dev.dockerfile

  core_test:
    name: Test core
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v5
      - name: setup docker
        uses: docker/setup-compose-action@v1
      - name: run tests
        run: cat core/.env.example >> core/.env.test && docker compose -f core/docker-compose.test.yml up --build --force-recreate --remove-orphans --abort-on-container-exit
        env:
          POSTGRES_HOST: ${{ vars.POSTGRES_HOST }}
          POSTGRES_PORT: ${{ vars.POSTGRES_PORT }}
          POSTGRES_USER: ${{ vars.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ vars.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ vars.POSTGRES_DB }}

  bff_lint:
    name: Lint BFF
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v4
      - name: setup uv
        uses: astral-sh/setup-uv@v2
      - name: install dependencies
        run: uv venv --python 3.13.5
        working-directory: bff/
      - name: codegen
        run: |
          uv run openapi-python-client generate --path ../docs/api/openapi.yaml --overwrite --output-path ./tmp
          rm -rf core_client
          mv tmp/core_client lkshmatch/
          rm -rf ./tmp
        working-directory: bff/
      - name: lint
        run: uv run ruff check lkshmatch
        working-directory: bff/

  bff_typecheck:
    name: Typecheck BFF
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v4
      - name: setup uv
        uses: astral-sh/setup-uv@v2
      - name: install dependencies
        run: uv venv --python 3.13.5
        working-directory: bff/
      - name: codegen
        run: |
          uv run openapi-python-client generate --path ../docs/api/openapi.yaml --overwrite --output-path ./tmp
          rm -rf core_client
          mv tmp/core_client lkshmatch/
          rm -rf ./tmp
        working-directory: bff/
      - name: typecheck
        run: uv run mypy -p lkshmatch --cache-dir=/dev/null --config-file=pyproject.toml
        working-directory: bff/

  bff_test:
    name: Test BFF
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v5
      - name: setup docker
        uses: docker/setup-compose-action@v1
      - name: run tests
        run: |
          docker network create match-shared-network
          cat bff/.env.example >> bff/.env.test
          docker compose -f bff/docker-compose.test.yml up --build --force-recreate --remove-orphans --abort-on-container-exit
        env:
          MONGO_INITDB_ROOT_USERNAME: ${ vars.MONGODB_ROOT_USERNAME }
          MONGO_INITDB_ROOT_PASSWORD: ${ vars.MONGODB_ROOT_PASSWORD }
          MONGO_INITDB_DATABASE: ${ vars.MONGODB_DATABASE }

  bff_build:
    name: Build BFF
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v5
      - name: setup docker
        uses: docker/setup-buildx-action@v3
      - name: build
        run: docker buildx build . --file bff/dev.dockerfile
